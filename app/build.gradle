apply from: "${rootProject.rootDir}/common_config.gradle"    //引用额外的配置
apply plugin: 'com.android.application'
println 'build.gradle的配置阶段'

android {
    project.ext.setDefaultConfig android    //调用配置信息
    defaultConfig {
        applicationId project.ext.applicationId
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [AROUTER_MODULE_NAME: project.getName()]
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
        release {
            storeFile file(KEYSTORE_FILE)
            storePassword KEYSTORE_PASSWORD
            keyAlias KEY_ALIAS
            keyPassword KEY_PASSWORD
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false      //打开混淆，如果混淆出问题，可关闭
            shrinkResources false        //资源压缩
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    // Butterknife requires Java 8.
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    applicationVariants.all { variant ->
        variant.outputs.all {       //指定打包名字格式
            def date = new Date().format("yyyyMMdd", TimeZone.getTimeZone("GMT+08"))
            def fileName = "VideoMusicSpeak" + "_V${defaultConfig.versionName}_${date}_" +
                    variant.name +
                    ".apk"
            outputFileName = fileName
        }
    }

}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "com.android.support:appcompat-v7:${project.ext.supportVersion}"
    implementation "com.android.support:design:${project.ext.supportVersion}"
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    annotationProcessor 'com.alibaba:arouter-compiler:1.2.1'

    annotationProcessor "com.jakewharton:butterknife-compiler:${project.ext.butterKnifeVersion}"

    implementation project(':lib_base')

    if (!project.ext.isModulePictureDebug) {
        implementation project(':module_picture')
    }
    if (!project.ext.isModuleVideoDebug) {
        implementation project(':module_video')
    }
    if (!project.ext.isModuleVoiceDebug) {
        implementation project(':module_voice')
    }
    if (!project.ext.isModuleLoginDebug) {
        implementation project(':module_login')
    }
    if (!project.ext.isModuleMineDebug) {
        implementation project(':module_mine')
    }
// 闭包中执行的代码
    println 'dependencies中执行的代码'
}

// 创建一个Task
task task() {
    println 'Task中的配置代码'
    // 定义一个闭包
    def a = {
        println 'Task中的配置代码2'
    }
    // 执行闭包
    a()
    doFirst {
        println '这段代码配置阶段不执行'
    }
}

println '我是顺序执行的'
